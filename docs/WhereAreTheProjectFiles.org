# SPDX-FileCopyrightText: © 2024 Alexander Kromm <mmaulwurff@gmail.com>
# SPDX-License-Identifier: CC0-1.0

#+title: Where Are The Project Files?

This is Emacs Org-mode literate project file. Use Emacs to extract the individual files. You don't have to open the Emacs window. Use the following command line command to extract source code from a file named File.org:

emacs File.org --quick --batch --eval "(progn (require 'ob-tangle) (setq org-confirm-babel-evaluate nil) (org-babel-tangle))"

⚠ Warning! Don't run scripts from the sources you don't trust. Org files may contain code too, always examine the file before extracting source code from it.

The breakdown of the script above:
- launch Emacs with the File.org file:
  - ~--quick~ - don't load the Emacs settings and don't show the splash screen,
  - ~--batch~ - launch Emacs without interface, so it processes the command and exits,
  - ~--eval~ - run the following Elisp commands:
    - ~progn~ - run the following command sequence;
    - ~require 'ob-tangle~ - load the Emacs module for extracting source code from .org files;
    - ~setq org-confirm-babel-evaluate nil~ - allow running code from .org file, which is used for macros and text generation. Running code from .org file is disabled by default;
    - ~org-babel-tangle~ - extract source code from .org file to separate files.

* Pros

** Logical code structure

You can put related program components together, even if they are in different languages or file formats. Like this: conventional code structure:
- application/file1: feature1 settings, feature2 settings;
- application/file2: feature1 source code, feature2 source code;
- tests/file3: feature1 tests, feature2 tests.

Logical code structure:
- file1:
  - section1: feature1 settings, feature1 source code, feature1 tests,
  - section2: feature2 settings, feature2 source code, feature2 tests.

** Macros

Elisp can be used to generate code. Great for boilerplate code.

** Links

To file sections, to other files, URLs.

** HTML documentation

Export to HTML produces a very nicely formatted document. Also, GitHub shows .org files as a formatted HTML page, though macros and ~:noexport:~ sections are not supported.

* Cons

** Limited text editor choice

There is some support for Org-mode for editors other than Emacs, but I believe Elisp macros is out of the question for them.

** Limited project size

Emacs becomes less responsive with big and complex Org-mode files.

** Extra syntax

Markers for code blocks: ~#+begin_src~, ~#+end_src~, etc litter the file.

** Licensing mess

It's a hassle to apply different licenses to different parts of the file.
