# SPDX-FileCopyrightText: © 2021 Alexander Kromm <mmaulwurff@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only
#+property: header-args :comments no :mkdirp yes :noweb yes :results none

#+title: DoomDoctor v1.0.0-next

DoomDoctor contains tools for GZDoom mod debugging.

DoomDoctor is a part of [[https://github.com/mmaulwurff/doom-toolbox/][DoomToolbox]].

* [[file:documentation/WhereAreTheProjectFiles.org][Where are the project files?]] :noexport:

* Acknowledgments

- Thanks to KeksDose for the concept of VM abort handler.
- Thanks to Colerx for bug reports.
- Thanks to Accensus for feature suggestions.
- Thanks to ZippeyKeys12 for Clematis.

* Licenses

[[file:LICENSES/CC0-1.0.txt][CC0-1.0]]
#+name: CC
#+begin_src text :exports none
SPDX-FileCopyrightText: © 2021 Alexander Kromm <mmaulwurff@gmail.com>
SPDX-License-Identifier: CC0-1.0
#+end_src

#+begin_src text :tangle build/DoomDoctor/cvarinfo.txt :exports none
// <<CC>>
#+end_src
#+begin_src text :tangle build/DoomDoctor/keyconf.txt :exports none
// <<CC>>
#+end_src
#+begin_src text :tangle build/DoomDoctor/mapinfo.txt :exports none
// <<CC>>
#+end_src
#+begin_src text :tangle build/DoomDoctorTest/mapinfo.txt :exports none
// <<CC>>
#+end_src

[[file:LICENSES/GPL-3.0-only.txt][GPL-3.0-only]]
#+name: GPL
#+begin_src text :exports none
SPDX-FileCopyrightText: © 2021 Alexander Kromm <mmaulwurff@gmail.com>
SPDX-License-Identifier: GPL-3.0-only
#+end_src

#+begin_src c :tangle build/DoomDoctor/zscript.zs :exports none
// <<GPL>>
#+end_src
#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs :exports none
// <<GPL>>
#+end_src
#+begin_src c :tangle build/DoomDoctor/zscript/Troublemaker.zs :exports none
// <<GPL>>
#+end_src
#+begin_src c :tangle build/DoomDoctor/zscript/VmAbortHandler.zs :exports none
// <<GPL>>
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs :exports none
// <<GPL>>
#+end_src

* Tests preamble

Notes:
- Don't decrease the delay before reviving, the actor sometimes isn't fully dead yet.
  TODO: make the scripts wait until something happens.
- Triggering several events at once to speed up tests. The events should not
  interfere with each other.
- Warp and use commands are supposed to activate the [[https://github.com/fragglet/miniwad][Miniwad]] end level button.

#+begin_src text :tangle build/DoomDoctorTestCommands.txt
  dd_logging_engine_events_enabled  true;
  dd_logging_replace_events_enabled true;
  dd_logging_world_events_enabled   true;
  dd_logging_player_events_enabled  true;
  dd_logging_process_events_enabled true;
wait 2;
  map map01;
wait 2;
  dd_force_lightning;
  event TestConsoleEvent;
  interfaceEvent TestInterfaceEvent 9;
  mdk TestDamageType;
  kill;
wait 5;
  resurrect;
  warp 60 -128 0; +use;
wait 3;
  quit
#+end_src

#+begin_src elisp :exports none
(compile "./tools/org.py test DoomDoctor.org")
#+end_src

#+begin_src text :tangle build/DoomDoctorTest/mapinfo.txt :exports none
GameInfo { EventHandlers = "dd_LoggerTestRunner" }
#+end_src

#+begin_src c :tangle build/DoomDoctorTest/zscript.zs :exports none
version 4.12.2

class dd_LoggerTest : Clematis {}

// TODO: add lower order logger test runner.
class dd_LoggerTestRunner : StaticEventHandler
{

  private Clematis mTest;
  private dd_BufferedConsole mConsole;

  void assert(Name testCaseName, bool condition) const
  {
    mTest.it(testCaseName, mTest.assert(condition));
  }

  override void OnRegister()
  {
    // To catch what logger logs.
    setOrder(int.max);

    mTest = new("dd_LoggerTest");
    mConsole = dd_BufferedConsole.getInstance();

    mTest.Describe("DoomDoctor Logger tests");
    OnRegisterTest();
  }

  override void OnUnregister()
  {
    let totalTestsCount = <<count-logger-tests()>>;
    let executedTestsCount = mTest.TestsRunTotal();
    bool areAllTestsExecuted = executedTestsCount == totalTestsCount;
    assert("all tests executed", areAllTestsExecuted);
    if (!areAllTestsExecuted)
      Console.printf("Executed: %d, total: %d.", executedTestsCount, totalTestsCount);

    mTest.EndDescribe();
  }
#+end_src

#+name: count-logger-tests
#+begin_src elisp :exports none
(let ((pos 0)
      (count 0))
  (while (string-match "assert\(\"log: " (buffer-string) pos)
    (setq count (1+ count))
    (setq pos (match-end 0)))
  count)
#+end_src

* Source code preamble

#+begin_src text :tangle build/DoomDoctor/mapinfo.txt :exports none
GameInfo
{
  EventHandlers = "dd_VmAbortHandler",
                  "dd_Troublemaker",
                  "dd_BufferedConsole",
                  "dd_Logger"
}
#+end_src

#+begin_src c :tangle build/DoomDoctor/zscript.zs :exports none
version 4.12.2

<<module("StringUtils")>>

#include "zscript/VmAbortHandler.zs"
#include "zscript/Troublemaker.zs"
#include "zscript/Logger.zs"
#+end_src

[[file:modules/StringUtils.org][StringUtils]]

#+name: module
#+begin_src elisp :var module-name = "" :exports none
(shell-command
  (format "./tools/org.py export modules/%1$s.org dd_ build/DoomDoctor/zscript/%1$s.zs"
          module-name))
(format "#include \"zscript/%s.zs\"" module-name)
#+end_src

* VM Abort Handling

TODO: move VM abort handling to a module.

VM abort reports:
- system time;
- basic game information: map name, total time, multiplayer status, player class,
  skill;
- game configuration: compat flags, dm flags, autoaim;
- event handler list;
- a request for the user to report the bug.

If there are several VM abort handlers loaded, only the first one will print stuff.
For this to work, all handlers must have ~VmAbortHandler~ somewhere in their class
name.

** Settings

#+begin_src text :tangle build/DoomDoctor/cvarinfo.txt
user bool dd_vm_abort_report_enabled = true;
#+end_src

** Console commands

#+begin_src text :tangle build/DoomDoctor/keyconf.txt
Alias dd_report "event dd_report"
#+end_src

** ~dd_VmAbortHandler~

TODO: make ~dd_VmAbortHandler~ savefile-compatible (~StaticEventHandler~).

#+begin_src c :tangle build/DoomDoctor/zscript/VmAbortHandler.zs
class dd_VmAbortHandler : EventHandler
{

  override void playerSpawned(PlayerEvent event)
  {
    mReport = new("dd_Report");
    if (event.playerNumber == consolePlayer) mReport.writePlayerInfo();
  }

  override void uiTick()
  {
    bool isOnceASecond = level.totalTime % TICRATE == 0;
    if (isOnceASecond) mReport.writeSystemTime();
  }

  override void onDestroy()
  {
    if (gameState != GS_FullConsole
        || !amIFirst()
        || !Cvar.getCvar("dd_vm_abort_report_enabled", players[consolePlayer]).getBool())
      {
        return;
      }

    Console.printf("%s\n%s", mReport.report(), getAttentionMessage());
  }

  override void consoleProcess(ConsoleEvent event)
  {
    if (amIFirst() && event.name == "dd_report")
      {
        Console.printf("%s", mReport.report());
      }
  }

  private clearscope bool amIFirst()
  {
    foreach (aClass : AllClasses)
      {
        string className = aClass.getClassName();
        bool isVmAbortHandler = (className.indexOf("VmAbortHandler") != -1);

        if (!isVmAbortHandler) continue;

        return className == getClassName();
      }
    return false;
  }

  private clearscope string getAttentionMessage()
  {
    string userName = players[consolePlayer].getUserName();
    string hashes = "\cg############################################################";

    Array<string> lines =
      {
        "",
        hashes,
        " " .. userName .. "\cg, please report this VM abort to mod author.",
        " Attach screenshot to the report.",
        " Type \"screenshot\" below to take a screenshot.",
        hashes
      };

    return dd_su.join(lines, "\n");
  }

  private dd_Report mReport;

} // class dd_VmAbortHandler
#+end_src

** ~dd_Report~

#+begin_src c :tangle build/DoomDoctor/zscript/VmAbortHandler.zs
class dd_Report
{

  clearscope void writePlayerInfo()
  {
    mPlayerClassName = players[consolePlayer].mo.getClassName();
    mSkillName       = g_SkillName();
  }

  ui void writeSystemTime()
  {
    mSystemTime = SystemTime.now();
  }

  clearscope string report()
  {
    Array<string> lines =
      {
        "DoomDoctor Report: " .. getSystemTime(),
        getGameInfo(),
        getConfiguration(),
        getEventHandlers()
      };

    return dd_su.join(lines, "\n");
  }

  private static clearscope string getConfiguration()
  {
    return new("dd_Description")
      .addCvar("compatflags")
      .addCvar("compatflags2")
      .addCvar("dmflags")
      .addCvar("dmflags2")
      .addCvar("autoaim").compose();
  }

  private clearscope string getGameInfo()
  {
    return new("dd_Description")
      .add("level", level.mapName)
      .addInt("time", level.totalTime)
      .addBool("multiplayer", multiplayer)
      .add("player class", mPlayerClassName)
      .add("skill", mSkillName).compose();
  }

  private static clearscope string getEventHandlers()
  {
    Array<string> normalEventHandlers;
    Array<string> staticEventHandlers;

    foreach (aClass : AllClasses)
      {
        if (!(aClass is "StaticEventHandler")) continue;
        if (aClass == "StaticEventHandler" || aClass == "EventHandler") continue;

        if (aClass is "EventHandler") normalEventHandlers.push(aClass.getClassName());
        else staticEventHandlers.push(aClass.getClassName());
      }

    return "Event handlers: " .. dd_su.join(normalEventHandlers) .. "\n" ..
      "Static event handlers: " .. dd_su.join(staticEventHandlers);
  }

  private clearscope string getSystemTime()
  {
    return "System time: " .. SystemTime.format("%F %T %Z", mSystemTime);
  }

  private string mPlayerClassName;
  private string mSkillName;
  private int mSystemTime;

} // class dd_Report
#+end_src

* Troublemaker

Troublemaker provides console commands to check if a mod can handle some unexpected
events.

** Console commands

*** Commands to cause problematic events
#+begin_src text :tangle build/DoomDoctor/keyconf.txt
Alias dd_nullify_player        "netevent dd_nullify_player"
Alias dd_spawn_null_thing      "netevent dd_spawn_null_thing; summon dd_Spawnable"
Alias dd_nullify_player_weapon "netevent dd_nullify_player_weapon"
Alias dd_take_all_weapons      "take weapons"
Alias dd_spawn_with_no_tags    "summon dd_WeaponWithNoTag; summon dd_EnemyWithNoTag"
#+end_src

*** Helper commands
#+begin_src text :tangle build/DoomDoctor/keyconf.txt
Alias dd_revive_everything     "netevent dd_revive_everything"
Alias dd_force_lightning       "netevent dd_force_lightning"
#+end_src

** Source

TODO: make ~dd_Troublemaker~ savefile-compatible (~StaticEventHandler~).

#+begin_src c :tangle build/DoomDoctor/zscript/Troublemaker.zs
mixin class dd_Volatile { override void Tick() { if (GetAge() > 0) destroy(); }  }

class dd_WeaponWithNoTag : Weapon { mixin dd_Volatile; }
class dd_Spawnable : Actor { mixin dd_Volatile; }

class dd_EnemyWithNoTag : Actor
{
  Default { +IsMonster; }
  mixin dd_Volatile;
}

class dd_Troublemaker : EventHandler
{

  // To be able to change events before they are processed by other event handlers.
  override void OnRegister() { setOrder(int.min); }

  override void NetworkProcess(ConsoleEvent event)
  {
    string command = event.name;

    if      (command == "dd_nullify_player") nullifyPlayer();
    else if (command == "dd_spawn_null_thing") nullifySpawnedThing();
    else if (command == "dd_nullify_player_weapon") nullifyPlayerWeapon();
    else if (command == "dd_revive_everything") reviveEverything();
    else if (command == "dd_force_lightning") forceLightning();
  }

  override void WorldThingSpawned(WorldEvent event)
  {
    if (mIsScheduledSpawnedThingIsNull)
      {
        mIsScheduledSpawnedThingIsNull = false;
        event.thing.destroy();
      }
  }

  private void nullifyPlayer()
  {
    players[consolePlayer].mo.destroy();

    // Interestingly, the
    //players[consolePlayer].mo = NULL;
    // just crashes GZDoom. Don't ever do that!
  }

  private void nullifySpawnedThing()
  {
    mIsScheduledSpawnedThingIsNull = true;
  }

  private void nullifyPlayerWeapon()
  {
    players[consolePlayer].readyWeapon = NULL;
  }

  private void reviveEverything()
  {
    Actor anActor;
    for (let i = ThinkerIterator.Create("Actor"); anActor = Actor(i.Next());)
      {
        players[consolePlayer].mo.RaiseActor(anActor);
      }
  }

  // TODO: test on a map with lightning.
  private void forceLightning()
  {
    let lightningIterator = ThinkerIterator.Create("Thinker", Thinker.STAT_Lightning);
    bool wasLightning = lightningIterator.Next() != NULL;

    if (wasLightning)
      level.ForceLightning(0);
    else
      level.ForceLightning(1);
  }

  private bool mIsScheduledSpawnedThingIsNull;

} // class dd_Troublemaker
#+end_src

* Logging

** Settings

#+begin_src text :tangle build/DoomDoctor/cvarinfo.txt
server bool dd_logging_engine_events_enabled  = false;
server bool dd_logging_replace_events_enabled = false;

user bool dd_logging_world_events_enabled   = false;
user bool dd_logging_player_events_enabled  = false;
user bool dd_logging_process_events_enabled = false;
#+end_src

** Console commands

#+begin_src text :tangle build/DoomDoctor/keyconf.txt

Alias dd_logging_disable "ResetCvar dd_logging_engine_events_enabled; ResetCvar dd_logging_replace_events_enabled; ResetCvar dd_logging_world_events_enabled; ResetCvar dd_logging_player_events_enabled; ResetCvar dd_logging_process_events_enabled"
#+end_src

** ~dd_BufferedConsole~

Prints to the engine console and saves the messages so they can be checked. Also
prints level time.

~StaticEventHandler~ used as a Singleton.

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs

class dd_BufferedConsole : StaticEventHandler
{

  static clearscope dd_BufferedConsole getInstance()
  {
    return dd_BufferedConsole(find("dd_BufferedConsole"));
  }

  static clearscope void printf(string format, string arg1 = "", string arg2 = "")
  {
    string message = string.format(format, arg1, arg2);

    getInstance().append(message);
    Console.printf("(%05d) %s", level.time, message);
  }

  void append(string message) const { mBuffer.appendFormat("\n" .. message); }
  void clear() const { mBuffer = ""; }

  bool contains(string substring) const { return mBuffer.IndexOf(substring) != -1; }

  private string mBuffer;

} // class dd_BufferedConsole
#+end_src

** ~dd_Logger~

Notes
- The following events are not logged, because nothing interesting can change here:
  ~RenderOverlay~, ~RenderUnderlay~, ~UiTick~, ~PostUiTick~, ~InputProcess~,
  ~UiProcess~.
- Events cannot be destroyed, so event parameters are never NULL.
- Most events are followed by the test code that also works as an example of what an
  event report contains.

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
class dd_Logger : StaticEventHandler
#+end_src
#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs :exports none
{
#+end_src

*** Engine events

**** ~OnRegister~
#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void OnRegister()
{
  if (!dd_logging_engine_events_enabled) return;

  // To catch all changes to events.
  setOrder(int.max - 1);

  mFunctionName = "OnRegister";
  logInfo();
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
void OnRegisterTest()
{
  assert("log: OnRegister", mConsole.contains("OnRegister"));
  mConsole.clear();
}
#+end_src

**** ~OnUnregister~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void OnUnregister()
{
  if (!dd_logging_engine_events_enabled) return;

  mFunctionName = "OnUnregister";
  logInfo();
}
#+end_src

Note: event order for ~OnUnregister~ is reversed.

**** ~OnEngineInitialize~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void OnEngineInitialize()
{
  if (!dd_logging_engine_events_enabled) return;

  mFunctionName = "OnEngineInitialize";
  logInfo();
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void OnEngineInitialize()
{
  assert("log: OnEngineInitialize", mConsole.contains("OnEngineInitialize"));
  mConsole.clear();
}
#+end_src

**** ~NewGame~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void NewGame()
{
  if (!dd_logging_engine_events_enabled) return;

  mFunctionName = "NewGame";
  logInfo();
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void NewGame()
{
  <<only-once()>>;

  assert("log: NewGame", mConsole.contains("NewGame"));
  mConsole.clear();
}
#+end_src

*** World events

**** ~WorldLoaded~
#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldLoaded(WorldEvent event)
{
  // To load Cvars when the game is loaded from a save.
  loadCvars();

  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldLoaded";
  logInfo(describeWorldEvent(event, IsSaveGame | IsReopen));
  check(OtherHandlers | PlayerChecks, event);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void WorldLoaded(WorldEvent event)
{
  <<only-once()>>;

  assert("log: WorldLoaded", mConsole.contains("WorldLoaded"));
  assert("log: WorldLoaded", mConsole.contains("IsSaveGame: false"));
  assert("log: WorldLoaded", mConsole.contains("IsReopen"));
  mConsole.clear();
}
#+end_src

**** ~WorldUnloaded~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldUnloaded(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldUnloaded";
  logInfo(describeWorldEvent(event, IsSaveGame | NextMap));
}
#+end_src

Note: event order for ~WorldUnloaded~ is reversed.

**** ~WorldThingSpawned~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldThingSpawned(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldThingSpawned";
  logInfo(describeWorldEvent(event, Thing));
  check(PlayerChecks | ThingNull | NoTag, event);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void WorldThingSpawned(WorldEvent event)
{
  <<only-once()>>;

  assert("log: WorldThingSpawned", mConsole.contains("WorldThingSpawned"));
  assert("log: WorldThingSpawned", mConsole.contains("Thing: "));
  mConsole.clear();
}
#+end_src

**** ~WorldThingDied~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldThingDied(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldThingDied";
  logInfo(describeWorldEvent(event, Thing | Inflictor));
  check(PlayerChecks | ThingNull, event);
}
#+end_src

The player is killed by console commands in [[Tests preamble]] section.

#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void WorldThingDied(WorldEvent event)
{
  assert("log: WorldThingDied", mConsole.contains("WorldThingDied"));
  assert("log: WorldThingDied", mConsole.contains("DoomPlayer"));
  assert("log: WorldThingDied", mConsole.contains("Inflictor: DoomPlayer"));
  mConsole.clear();
}
#+end_src

**** ~WorldThingGround~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldThingGround(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldThingGround";
  logInfo(describeWorldEvent(event, Thing | CrushedState));
  check(PlayerChecks | ThingNull, event);
}
#+end_src

TODO: how to test this?

**** ~WorldThingRevived~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldThingRevived(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldThingRevived";
  logInfo(describeWorldEvent(event, Thing));
  check(PlayerChecks | ThingNull, event);
}
#+end_src

The player is resurrected by console commands in [[Tests preamble]] section.

#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void WorldThingRevived(WorldEvent event)
{
  assert("log: WorldThingRevived", mConsole.contains("WorldThingRevived"));
  assert("log: WorldThingRevived", mConsole.contains("DoomPlayer"));
  mConsole.clear();
}
#+end_src

**** ~WorldThingDamaged~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldThingDamaged(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldThingDamaged";
  logInfo(describeWorldEvent(event, Thing | Inflictor | DamageProperties
                             | DamageFlags | DamageAngle));
  check(PlayerChecks | ThingNull, event);
}
#+end_src

The player is damaged by console commands in [[Tests preamble]] section.

#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void WorldThingDamaged(WorldEvent event)
{
  <<only-once()>>;

  assert("log: WorldThingDamaged", mConsole.contains("WorldThingDamaged"));
  assert("log: WorldThingDamaged", mConsole.contains("DoomPlayer"));
  assert("log: WorldThingDamaged", mConsole.contains("Suicide"));
  mConsole.clear();
}
#+end_src

**** ~WorldThingDestroyed~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldThingDestroyed(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldThingDestroyed";
  logInfo(describeWorldEvent(event, Thing));
  // Player can be null here, don't check.
  check(ThingNull, event);
}
#+end_src

Note: event order for ~WorldThingDestroyed~ is reversed.

**** ~WorldLinePreActivated~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldLinePreActivated(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldLinePreActivated";
  logInfo(describeWorldEvent(event, Thing | LineProperties | ShouldActivate));
  check(PlayerChecks | ThingNull, event);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void WorldLinePreActivated(WorldEvent event)
{
  assert("log: WorldLinePreActivated", mConsole.contains("WorldLinePreActivated"));
  assert("log: WorldLinePreActivated", mConsole.contains("Thing: DoomPlayer"));
  assert("log: WorldLinePreActivated", mConsole.contains("ActivationType: SPAC_Use"));
  assert("log: WorldLinePreActivated", mConsole.contains("ShouldActivate: true"));
  mConsole.clear();
}
#+end_src

**** ~WorldLineActivated~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldLineActivated(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldLineActivated";
  logInfo(describeWorldEvent(event, Thing | LineProperties));
  check(PlayerChecks | ThingNull, event);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void WorldLineActivated(WorldEvent event)
{
  assert("log: WorldLineActivated", mConsole.contains("WorldLineActivated"));
  assert("log: WorldLineActivated", mConsole.contains("Thing: DoomPlayer"));
  assert("log: WorldLineActivated", mConsole.contains("ActivationType: SPAC_Use"));
  mConsole.clear();
}
#+end_src

**** ~WorldSectorDamaged~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldSectorDamaged(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldSectorDamaged";
  logInfo(describeWorldEvent(event, DamageProperties | NewDamage | DamagePosition
                             | DamageIsRadius | DamageSector | DamageSectorPart));
  check(PlayerChecks, event);
}
#+end_src

**** ~WorldLineDamaged~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldLineDamaged(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldLineDamaged";
  logInfo(describeWorldEvent(event, DamageProperties | NewDamage | DamagePosition
                             | DamageIsRadius | DamageLine | DamageLineSide));
  check(PlayerChecks, event);
}
#+end_src

**** ~WorldLightning~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldLightning(WorldEvent event)
{
  if (!dd_logging_world_events_enabled.getBool()) return;

  mFunctionName = "WorldLightning";
  logInfo("no parameters");
  check(PlayerChecks, event);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void WorldLightning(WorldEvent event)
{
  assert("log: WorldLightning", mConsole.contains("WorldLightning"));
  mConsole.clear();
}
#+end_src

**** ~WorldTick~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void WorldTick()
{
  mFunctionName = "WorldTick";
  // Do not log: frequent event.
  check(PlayerChecks);
}
#+end_src

*** Player events

**** ~PlayerEntered~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void PlayerEntered(PlayerEvent event)
{
  if (!dd_logging_player_events_enabled.getBool()) return;

  mFunctionName = "PlayerEntered";
  logInfo(describePlayerEvent(event));
  check(PlayerChecks);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void PlayerEntered(PlayerEvent event)
{
  <<only-once()>>;

  assert("log: PlayerEntered", mConsole.contains("PlayerEntered"));
  assert("log: PlayerEntered", mConsole.contains("PlayerNumber: 0"));
  assert("log: PlayerEntered", mConsole.contains("IsReturn: false"));
  mConsole.clear();
}
#+end_src

**** ~PlayerSpawned~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void PlayerSpawned(PlayerEvent event)
{
  loadCvars();

  if (!dd_logging_player_events_enabled.getBool()) return;

  mFunctionName = "PlayerSpawned";
  logInfo(describePlayerEvent(event));
  check(PlayerChecks);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void PlayerSpawned(PlayerEvent event)
{
  <<only-once()>>;

  assert("log: PlayerSpawned", mConsole.contains("PlayerSpawned"));
  mConsole.clear();
}
#+end_src

**** ~PlayerRespawned~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void PlayerRespawned(PlayerEvent event)
{
  if (!dd_logging_player_events_enabled.getBool()) return;

  mFunctionName = "PlayerRespawned";
  logInfo(describePlayerEvent(event));
  check(PlayerChecks);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void PlayerRespawned(PlayerEvent event)
{
  assert("log: PlayerRespawned", mConsole.contains("PlayerRespawned"));
  mConsole.clear();
}
#+end_src

**** ~PlayerDied~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void PlayerDied(PlayerEvent event)
{
  if (!dd_logging_player_events_enabled.getBool()) return;

  mFunctionName = "PlayerDied";
  logInfo(describePlayerEvent(event));
  check(PlayerChecks);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void PlayerDied(PlayerEvent event)
{
  assert("log: PlayerDied", mConsole.contains("PlayerDied"));
  mConsole.clear();
}
#+end_src

**** ~PlayerDisconnected~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void PlayerDisconnected(PlayerEvent event)
{
  if (!dd_logging_player_events_enabled.getBool()) return;

  mFunctionName = "PlayerDisconnected";
  logInfo(describePlayerEvent(event));
  check(PlayerChecks);
}
#+end_src

TODO: test this.

*** Process events

**** ~ConsoleProcess~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void ConsoleProcess(ConsoleEvent event)
{
  if (!dd_logging_process_events_enabled.getBool()) return;

  setFunctionName("ConsoleProcess");
  logInfo(describeConsoleEvent(event));
  check(PlayerChecks);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void ConsoleProcess(ConsoleEvent event)
{
  assert("log: ConsoleProcess", mConsole.contains("ConsoleProcess"));
  assert("log: ConsoleProcess", mConsole.contains("Name: TestConsoleEvent"));
  mConsole.clear();
}
#+end_src

**** ~InterfaceProcess~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void InterfaceProcess(ConsoleEvent event)
{
  if (!dd_logging_process_events_enabled.getBool()) return;

  setFunctionName("InterfaceProcess");
  logInfo(describeConsoleEvent(event));
  check(PlayerChecks);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void InterfaceProcess(ConsoleEvent event)
{
  assert("log: InterfaceProcess", mConsole.contains("InterfaceProcess"));
  assert("log: InterfaceProcess", mConsole.contains("Name: TestInterfaceEvent"));
  assert("log: InterfaceProcess", mConsole.contains("Args: 9"));
  mConsole.clear();
}
#+end_src

**** ~NetworkProcess~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void NetworkProcess(ConsoleEvent event)
{
  if (!dd_logging_process_events_enabled.getBool()) return;

  mFunctionName = "NetworkProcess";
  logInfo(describeConsoleEvent(event));
  check(PlayerChecks);
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void NetworkProcess(ConsoleEvent event)
{
  <<only-once()>>;

  assert("log: NetworkProcess", mConsole.contains("NetworkProcess"));
  assert("log: NetworkProcess", mConsole.contains("Player: 0"));
  assert("log: NetworkProcess", mConsole.contains("IsManual: true"));
  mConsole.clear();
}
#+end_src

*** Replacement events

**** ~CheckReplacement~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void CheckReplacement(ReplaceEvent event)
{
  if (!dd_logging_replace_events_enabled) return;

  mFunctionName = "CheckReplacement";
  logInfo(describeReplaceEvent(event));
}
#+end_src
#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
override void CheckReplacement(ReplaceEvent event)
{
  <<only-once()>>;

  assert("log: CheckReplacement", mConsole.contains("CheckReplacement"));
  assert("log: CheckReplacement", mConsole.contains("Replacement: NULL"));
  mConsole.clear();
}
#+end_src

**** ~CheckReplacee~

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
override void CheckReplacee(ReplacedEvent event)
{
  if (!dd_logging_replace_events_enabled) return;

  mFunctionName = "CheckReplacee";
  logInfo(describeReplacedEvent(event));
}
#+end_src

Note: nothing is replaced, so no such event in the base game.

*** Constants

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
enum CheckFlags
  {
    Nothing       = 1 << 0,
    OtherHandlers = 1 << 1,
    PlayerNull    = 1 << 2,
    WeaponNull    = 1 << 3,
    NoWeapons     = 1 << 4,
    ThingNull     = 1 << 5,
    NoTag         = 1 << 6,
  };
const PlayerChecks = PlayerNull | WeaponNull | NoWeapons;

enum WorldEventParameterFlags
  {
    IsSaveGame       = 1 <<  0,
    IsReopen         = 1 <<  1,
    NextMap          = 1 <<  2,

    Thing            = 1 <<  3,
    Inflictor        = 1 <<  4,

    Damage           = 1 <<  5,
    DamageSource     = 1 <<  6,
    DamageType       = 1 <<  7,
    DamageFlags      = 1 <<  8,
    DamageAngle      = 1 <<  9,

    ActivatedLine    = 1 << 10,
    ActivationType   = 1 << 11,
    ShouldActivate   = 1 << 12,

    DamageSectorPart = 1 << 13,
    DamageLine       = 1 << 14,
    DamageSector     = 1 << 15,
    DamageLineSide   = 1 << 16,
    DamagePosition   = 1 << 17,
    DamageIsRadius   = 1 << 18,
    NewDamage        = 1 << 19,
    CrushedState     = 1 << 20,
  };
const DamageProperties = Damage | DamageSource | DamageType;
const LineProperties = ActivatedLine | ActivationType;
#+end_src

*** Private Functions

TODO: move checks to somewhere where they are move visible.
TODO: add a check if weapons have icons. Filter by weapons that player can have.

#+begin_src c :tangle build/DoomDoctor/zscript/Logger.zs
private clearscope void check(int checks, WorldEvent aWorldEvent = NULL)
{
  if (checks & OtherHandlers) checkOtherEventHandlers();
  if (checks & PlayerNull)    checkPlayerIsNull();
  if (checks & NoWeapons)     checkPlayerHasNoWeapons();
  if (checks & WeaponNull)    checkPlayerWeaponIsNull();
  if (checks & ThingNull)     checkWorldEventThingIsNull(aWorldEvent);
  if (checks & NoTag)         checkWorldEventThingTag(aWorldEvent);
}

private static string describeWorldEvent(WorldEvent e, int parameters)
{
  let d = new("dd_Description");
  int p = parameters;

  if (p & IsSaveGame)       d.addBool       ("IsSaveGame",       e.IsSaveGame);
  if (p & IsReopen)         d.addBool       ("IsReopen",         e.IsReopen);
  if (p & NextMap)          d.add           ("NextMap",          e.NextMap);

  if (p & Thing)            d.addObject     ("Thing",            e.Thing);
  if (p & Inflictor)        d.addObject     ("Inflictor",        e.Inflictor);

  if (p & Damage)           d.addInt        ("Damage",           e.Damage);
  if (p & DamageSource)     d.addObject     ("DamageSource",     e.DamageSource);
  if (p & DamageType)       d.add           ("DamageType",       e.DamageType);

  if (p & DamageFlags)      d.addDamageFlags("DamageFlags",      e.DamageFlags);
  if (p & DamageAngle)      d.addFloat      ("DamageAngle",      e.DamageAngle);

  if (p & ActivatedLine)    d.addLine       ("ActivatedLine",    e.ActivatedLine);
  if (p & ActivationType)   d.addSpac       ("ActivationType",   e.ActivationType);
  if (p & ShouldActivate)   d.addBool       ("ShouldActivate",   e.ShouldActivate);

  if (p & DamageSector)     d.addSector     ("DamageSector",     e.DamageSector);
  if (p & DamageSectorPart) d.addSectorPart ("DamageSectorPart", e.DamageSectorPart);

  if (p & DamageLine)       d.addLine       ("DamageLine",       e.DamageLine);
  if (p & DamageLineSide)   d.addInt        ("DamageLineSide",   e.DamageLineSide);

  if (p & DamagePosition)   d.addVector3    ("DamagePosition",   e.DamagePosition);
  if (p & DamageIsRadius)   d.addBool       ("DamageIsRadius",   e.DamageIsRadius);
  if (p & NewDamage)        d.addInt        ("NewDamage",        e.NewDamage);

  if (p & CrushedState)     d.addState      ("CrushedState",     e.CrushedState);

  return d.compose();
}

private static string describePlayerEvent(PlayerEvent event)
{
  return new("dd_Description").
    addInt("PlayerNumber", event.playerNumber).
    addBool("IsReturn", event.isReturn).compose();
}

private clearscope static string describeConsoleEvent(ConsoleEvent event)
{
  return new("dd_Description").
    addInt ("Player",   event.Player).
    add    ("Name",     event.Name).
    add    ("Args",     string.format("%d, %d, %d",
                                      event.Args[0], event.Args[1], event.Args[2])).
    addBool("IsManual", event.IsManual).compose();
}

private static string describeReplaceEvent(ReplaceEvent event)
{
  return new("dd_Description").
    addClass("Replacee",    event.Replacee).
    addClass("Replacement", event.Replacement).
    addBool ("IsFinal",     event.IsFinal).compose();
}

private static string describeReplacedEvent(ReplacedEvent event)
{
  return new("dd_Description").
    addClass("Replacee",    event.Replacee).
    addClass("Replacement", event.Replacement).
    addBool ("IsFinal",     event.IsFinal).compose();
}

private clearscope void checkPlayerIsNull()
{
  if (mIsPlayerNullLogged ||  players[consolePlayer].mo != NULL) return;

  setIsPlayerNullLogged(true);
  logError("player is NULL");
}

private clearscope void checkWorldEventThingIsNull(WorldEvent event)
{
  if (event.thing == NULL) logError("WorldEvent.thing is NULL");
}

private clearscope void checkWorldEventThingTag(WorldEvent event)
{
  Actor thing = event.thing;
  if (thing == NULL) return;

  if ((thing.bIsMonster || thing is "Weapon") && thing.getTag(".") == ".")
    {
      logWarning("class " .. thing.getClassName() .. " is missing a tag");
    }
}

private clearscope void checkPlayerWeaponIsNull()
{
  if (players[consolePlayer].readyWeapon != NULL)
    {
      setIsPlayerWeaponNullLogged(false);
    }
  else if (!mIsPlayerWeaponNullLogged)
    {
      setIsPlayerWeaponNullLogged(true);
      logError("player weapon is NULL");
    }
}

private clearscope void checkPlayerHasNoWeapons()
{
  let player = players[consolePlayer].mo;
  if (player == NULL) return;

  if (player.findInventory("Weapon", true) != NULL)
    {
      setIsPlayerHasNoWeaponsLogged(false);
    }
  else if (!mIsPlayerHasNoWeaponsLogged)
    {
      setIsPlayerHasNoWeaponsLogged(true);
      logError("player has no weapons");
    }
}

private clearscope void checkOtherEventHandlers()
{
  if (mAreOtherEventHandlersChecked) return;
  setAreOtherEventHandlersChecked(true);

  bool isLoggerFound = false;
  bool isTroublemakerFound = false;

  foreach (aClass : AllClasses)
    {
      if (aClass is "dd_Logger") isLoggerFound = true;
      if (aClass is "dd_Troublemaker") isTroublemakerFound = true;

      if (!(aClass is "StaticEventHandler")
          || aClass == "StaticEventHandler"
          || aClass == "EventHandler"
          || aClass == "dd_Logger"
          || aClass == "dd_Troublemaker") continue;

      string eventHandlerName = aClass.getClassName();
      class<StaticEventHandler> eventHandlerClass = eventHandlerName;
      let instance = (aClass is "EventHandler")
        ? EventHandler.find(eventHandlerClass)
        : StaticEventHandler.find(eventHandlerClass);

      if (instance == NULL)
        {
          logWarning("event handler %s is defined but not activated in MAPINFO",
                     eventHandlerName);
          continue;
        }

      int contenderOrder = instance.order;
      if (contenderOrder == int.max && isLoggerFound)
        {
          logWarning("can't inspect events from %s. Load DoomDoctor after it or increase event handler order",
                     eventHandlerName);
        }

      else if (contenderOrder == int.min && !isTroublemakerFound)
        {
          logWarning("simulated troubles won't affect %s. Load DoomDoctor before it or decrease event handler order",
                     eventHandlerName);
        }
    }
}

private clearscope void logError(string format, string s = "")
{
  Console.printf("[ERROR] %s: %s.", mFunctionName, string.format(format, s));
}

private clearscope void logWarning(string format, string s = "")
{
  Console.printf("[WARNING] %s: %s.", mFunctionName, string.format(format, s));
}

private clearscope void logInfo(string message = "(empty)")
{
  Console.printf("[INFO] %s: %s.", mFunctionName, message);
}

// Hack to set class members from UI and data scopes.
private play void setFunctionName(string n) const { mFunctionName = n; }
private play void setIsPlayerNullLogged(bool b) const { mIsPlayerNullLogged = b; }
private play void setIsPlayerWeaponNullLogged(bool b) const { mIsPlayerWeaponNullLogged = b; }
private play void setIsPlayerHasNoWeaponsLogged(bool b) const { mIsPlayerHasNoWeaponsLogged = b; }
private play void setAreOtherEventHandlersChecked(bool b) const { mAreOtherEventHandlersChecked = b; }

private string mFunctionName;
private bool mIsPlayerNullLogged;
private bool mIsPlayerWeaponNullLogged;
private bool mIsPlayerHasNoWeaponsLogged;
private bool mAreOtherEventHandlersChecked;

private dd_BufferedConsole console;

<<define-cvars('("dd_logging_world_events_enabled" "dd_logging_player_events_enabled" "dd_logging_process_events_enabled"))>>

} // class dd_Logger
#+end_src

#+name: define-cvars
#+begin_src elisp :var cvars=() :exports none
(concat
 "private void loadCvars()\n{\n"
 "  PlayerInfo player = players[consolePlayer];\n"
 (mapconcat (lambda (x) (format "  %1$s = Cvar.getCvar(\"%1$s\", player);\n" x))
            cvars)
 "}\n\n"
 (mapconcat (lambda (x) (format "private Cvar %s;\n" x)) cvars))
#+end_src

* Tests end :noexport:

#+begin_src c :tangle build/DoomDoctorTest/zscript.zs
<<only-once-park-flags()>>

} // class dd_LoggerTestRunner
#+end_src

#+name: only-once
#+begin_src elisp
(setq only-once-id (if (boundp 'only-once-id) (1+ only-once-id) 0))

(format "if (mOnlyOnceFlag%1$d) return;\nmOnlyOnceFlag%1$d = true;" only-once-id)
#+end_src
#+name: only-once-park-flags
#+begin_src elisp
(let ((id only-once-id))
  (makunbound 'only-once-id)
  (mapconcat
   (lambda (x) (format "private bool mOnlyOnceFlag%d;\n" x))
   (number-sequence 0 id)))
#+end_src
