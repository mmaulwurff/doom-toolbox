# SPDX-FileCopyrightText: © 2021 Alexander Kromm <mmaulwurff@gmail.com>
# SPDX-License-Identifier: CC0-1.0
:properties:
:header-args: :comments noweb :mkdirp yes :noweb yes
:end:
#+title: Doom Doctor

* Q: Wait! Where are the project files?
A: This is Emacs Org mode literate project file. Use Emacs to extract the individual
files. You don't have to open the Emacs window. The command to extract the files is:

emacs this_file.org --quick --batch --funcall=org-babel-tangle

* Doom Doctor
Doom Doctor is a utility mod for ZScript'ed game engines.

* Features
- VM abort reports (controlled by dd_vm_abort_report_enabled cvar):
  - basic game information: map name, total time, multiplayer status, player
    class, skill;
  - game configuration: compat flags, dm flags, autoaim;
  - event handler list;
  - system time;
  - a request for the user to report the bug.

If there are several Zabor-based handlers loaded, only the first one will print
stuff. For this to work, all handlers must have "VmAbortHandler" somewhere in
their class name.

Also there is ~dd_report~ console command for gathering a report by manual request.

* Acknowledgments
- Thanks to KeksDose for the concept of VM abort handler.
- Thanks to Colerx for bug reports.
- Thanks to Accensus for feature suggestions.

* Licenses :noexport:
#+name: CC
#+begin_src :exports none
SPDX-FileTextCopyright: © 2021 Alexander Kromm <mmaulwurff@gmail.com>
SPDX-License-Identifier: CC0-1.0
#+end_src

#+name: GPL
#+begin_src :exports none
SPDX-FileTextCopyright: © 2021 Alexander Kromm <mmaulwurff@gmail.com>
SPDX-License-Identifier: GPL-3.0-or-later
#+end_src

#+begin_src c :tangle build/zscript.txt
// <<GPL>>
#+end_src
#+begin_src c :tangle build/keyconf.txt
// <<CC>>
#+end_src
#+begin_src c :tangle build/mapinfo.txt
// <<CC>>
#+end_src
#+begin_src c :tangle build/cvarinfo.txt
// <<CC>>
#+end_src
#+begin_src c :tangle test/mapinfo.txt
// <<CC>>
#+end_src
#+begin_src c :tangle test/zscript.txt
// <<GPL>>
#+end_src

* Console alias configuration
#+begin_src txt :tangle build/keyconf.txt
alias dd_report "event dd_report"
#+end_src

* Event handler declaration
#+begin_src txt :tangle build/mapinfo.txt
gameinfo { AddEventHandlers = "dd_VmAbortHandler" }
#+end_src

* Console variables
#+begin_src txt :tangle build/cvarinfo.txt
user bool dd_vm_abort_report_enabled = true;
#+end_src

* Tests preamble

#+begin_src txt :tangle test/mapinfo.txt
gameinfo { AddEventHandlers = "dd_TestEventHandler" }
#+end_src

#+begin_src c :tangle test/zscript.txt
version 4.5

class dd_TestEventHandler : StaticEventHandler
{
  override void onEngineInitialize() { Clematis.Create("dd_Test"); }
}

class dd_Test : Clematis
{
  override void TestSuites()
  {
#+end_src

* Source code
#+begin_src c :tangle build/zscript.txt
version 4.5

class dd_VmAbortHandler : EventHandler
{

  override void playerSpawned(PlayerEvent event)
  {
    mReporter = new("dd_Reporter");
    if (event.playerNumber == consolePlayer) mReporter.setPlayerInfo();
  }

  override void uiTick()
  {
    if (level.totalTime % 35 == 0) mReporter.rememberSystemTime(SystemTime.now());
  }

  override void onDestroy()
  {
    if (gameState != GS_FullConsole
        || !amIFirst()
        || !Cvar.getCvar("dd_vm_abort_report_enabled", players[consolePlayer]).getBool())
      {
        return;
      }

    mReporter.printReport();
    mReporter.printAttention();
  }

  override void consoleProcess(ConsoleEvent event)
  {
    if (amIFirst() && event.name == "dd_report") mReporter.printReport();
  }

  private clearscope bool amIFirst()
  {
    uint nClasses = AllClasses.size();
    for (uint i = 0; i < nClasses; ++i)
      {
        string className = AllClasses[i].getClassName();
        bool isVmAbortHandler = (className.indexOf("VmAbortHandler") != -1);

        if (!isVmAbortHandler) continue;

        return className == getClassName();
      }
    return false;
  }

  private dd_Reporter mReporter;
}

class dd_Reporter
{

  clearscope void setPlayerInfo()
  {
    mPlayerClassName = players[consolePlayer].mo.getClassName();
    mSkillName       = g_SkillName();
  }

  clearscope void printReport()
  {
    printVersion();
    Console.Printf("%s", getGameInfo());
    printConfiguration();
    printEventHandlers();
    printRealTime();
  }

  play void rememberSystemTime(int value) const
  {
    mSystemTime = value;
  }

  private static clearscope string getCvarIntValueAsString(string cvarName)
  {
    let aCvar = Cvar.getCvar(cvarName, players[consolePlayer]);
    return aCvar ? string.format("%s: %d", cvarName, aCvar.getInt()) : "";
  }

  private static clearscope string getCvarFloatValueAsString(string cvarName)
  {
    let aCvar = Cvar.getCvar(cvarName, players[consolePlayer]);
    return aCvar ? string.format("%s: %f", cvarName, aCvar.getFloat()) : "";
  }

  private static clearscope void printConfiguration()
  {
    Array<string> configuration =
      {
        getCvarIntValueAsString("compatflags"),
        getCvarIntValueAsString("compatflags2"),
        getCvarIntValueAsString("dmflags"),
        getCvarIntValueAsString("dmflags2"),
        getCvarFloatValueAsString("autoaim")
      };

    Console.printf("%s", dd_su.join(configuration, ", "));
  }

  clearscope void printAttention()
  {
    string userName = players[consolePlayer].getUserName();
    string message1 = string.format( "  # %s\cg, please report this VM abort to mod author."
                                     , userName
                                     );
    string message2 = "  # Attach screenshot to the report.";
    string message3 = "  # Type \"screenshot\" below to take a screenshot.";

    Array<string> tokens;
    userName.split(tokens, "\c");
    int colorCharsCount = (tokens.size() - 1) * 3;
    int length = max(max(message1.length() - colorCharsCount, message2.length()), message3.length());

    message1 = fillBox(message1, length);
    message2 = fillBox(message2, length);
    message3 = fillBox(message3, length);

    string hashes;
    for (int i = 0; i < length; ++i)
      {
        hashes = hashes .. "#";
      }
    Console.printf("\n\cg  %s\n%s\n%s\n%s\n  %s\n", hashes, message1, message2, message3, hashes);
  }

  private static clearscope string fillBox(string result, int length)
  {
    for (int i = result.length(); i < length; ++i) result.appendFormat(" ");
    result.appendFormat(" #");
    return result;
  }

  private static clearscope void printVersion()
  {
    Console.printf("Doom Doctor");
  }

  private clearscope string getGameInfo()
  {
    return string.format(
                         "Game: level: %s, time: %d, multiplayer: %d, player class: %s, skill: %s.",
                         level.mapName, level.totalTime, multiplayer, mPlayerClassName, mSkillName);
  }

  private static clearscope void printEventHandlers()
  {
    Array<string> eventHandlers;

    uint nClasses = AllClasses.size();
    for (uint i = 0; i < nClasses; ++i)
      {
        class aClass = AllClasses[i];

        if (  aClass is "StaticEventHandler"
              && aClass != "StaticEventHandler"
              && aClass != "EventHandler"
              )
          {
            eventHandlers.push(aClass.getClassName());
          }
      }

    Console.printf("Event handlers: %s", dd_su.join(eventHandlers, ", "));
  }

  private clearscope void printRealTime()
  {
    Console.printf("System time: %s", SystemTime.format("%F %T %Z", mSystemTime));
  }

  private string mPlayerClassName;
  private string mSkillName;
  private int mSystemTime;
}

<<module()>>
#+end_src

* Modules

#+name: module
#+begin_src emacs-lisp
(defun tangle-module (module)
  (org-babel-tangle-file (concat module ".org"))
  (string-replace "NAMESPACE_" "dd_" (f-read-text (concat "modules/" module ".txt"))))

(tangle-module "StringUtils")
#+end_src

* Tests end

#+begin_src c :tangle test/zscript.txt
}}
#+end_src

* TODO
- replace "Zabor" and "zr_", add reference to Zabor
- test manually for regressions
- fix colored user names
- update logo
- update licenses
- incorporate Mod Compatibility Checklist
- add test for join(), rewrite join

* DONE
