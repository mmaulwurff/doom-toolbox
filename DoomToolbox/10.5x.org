# SPDX-FileCopyrightText: © 2019 Alexander Kromm <mmaulwurff@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only
:properties:
:header-args: :comments no :mkdirp yes :noweb yes :results none
:end:
#+title: 10.5x v0.10.0-next

* [[file:../docs/WhereAreTheProjectFiles.org][Where are the project files?]]

* Description
[[https://www.doomworld.com/cacowards/2019/gameplay/][2019 Cacowards Mini Mod Safari]]: ~Make anything into a slaughtermap, or make nuts.wad not melt your CPU, all from the reach of a single slider.~

** Features
- Can increase or decrease the number of enemies;
- Should work with enemy replacers and randomizers;

** Options
- Global enemy multiplier.
- Enemy multiplier by type (set the global multiplier to 0 and start the map).
- Resurrection of automatically killed enemies (~x5_raise_divided~ Cvar, off by default).

** Anti-features
- No display of remaining enemies;
- May not work well with scripted maps;
- Doesn't affect enemies spawned after the map is loaded;
- Suggested max enemy amount: no, because it would limit enemy numbers disproportionately to the map size.

** Acknowledgments
- Original idea: Cutmanmike;
- Code used as a reference: The Zombie Killer;
- Bug reporting: Jimmy, Nems, murka, Arkezuli, Nightsentinel, Rowsol, StroggVorbis;
- Feature suggestions: Rowsol, Accensus;
- Translation support and Russian translation: Blueberryy;
- Brazilian Portuguese localization: generic name guy.

** Meta
- Contribution guidelines: [[../docs/CodeOfConduct.org][Code of Conduct]].
- [[../docs/CodeStyle.org][Code style]].

* Licenses
[[file:../LICENSES/GPL-3.0-only.txt][GPL-3.0-only]]
#+name: GPL
#+begin_src txt :exports none
SPDX-FileCopyrightText: © 2019 Alexander Kromm <mmaulwurff@gmail.com>
SPDX-License-Identifier: GPL-3.0-only
#+end_src

#+begin_src c :tangle ../build/10.5x/zscript.zs
// <<GPL>>
#+end_src
#+begin_src c :tangle ../build/10.5x/zscript/OptionMenuItemX5Slider.zs
// <<GPL>>
#+end_src
#+begin_src c :tangle ../build/10.5x/zscript/OptionMenuItemX5TypeSlider.zs
// <<GPL>>
#+end_src
#+begin_src c :tangle ../build/10.5x/zscript/x5_EventHandler.zs
// <<GPL>>
#+end_src
#+begin_src c :tangle ../build/10.5x/zscript/x5_Killer.zs
// <<GPL>>
#+end_src
#+begin_src c :tangle ../build/10.5x/zscript/x5_TypeMultipliersMenu.zs
// <<GPL>>
#+end_src
#+begin_src c :tangle ../build/10.5xTest/zscript.zs
// <<GPL>>
#+end_src

[[file:../LICENSES/CC0-1.0.txt][CC0-1.0]]
#+name: CC
#+begin_src txt :exports none
SPDX-FileCopyrightText: © 2019 Alexander Kromm <mmaulwurff@gmail.com>
SPDX-License-Identifier: CC0-1.0
#+end_src

#+begin_src c :tangle ../build/10.5x/cvarinfo.txt
// <<CC>>
#+end_src
#+begin_src ini :tangle ../build/10.5x/language.txt
// <<CC>>
#+end_src
#+begin_src c :tangle ../build/10.5x/mapinfo.txt
// <<CC>>
#+end_src
#+begin_src txt :tangle ../build/10.5x/menudef.txt
// <<CC>>
#+end_src
#+begin_src c :tangle ../build/10.5xTest/cvarinfo.txt
// <<CC>>
#+end_src
#+begin_src c :tangle ../build/10.5xTest/mapinfo.txt
// <<CC>>
#+end_src

* ~x5_EventHandler~
#+begin_src c :tangle ../build/10.5x/mapinfo.txt
GameInfo { EventHandlers = "x5_EventHandler" }
#+end_src

#+begin_src c :tangle ../build/10.5x/zscript/x5_EventHandler.zs
class x5_EventHandler : EventHandler
{
  // 1. Entry point.
  override void worldLoaded(WorldEvent event)
  {
    if (level.mapName ~== "titlemap")
    {
      destroy();
      return;
    }

    collectSpawnPoints(mSpawnPoints);

    if (mSpawnPoints.size() == 0)
    {
      destroy();
      return;
    }

    mEnemyTypes = collectEnemyTypes(mSpawnPoints);

    if (x5_multiplier == 0)
    {
      // Each enemy type has its own multiplier, ask to fill multipliers.
      mTypeMultipliers = NULL;
      if (consolePlayer == net_arbitrator)
        sendInterfaceEvent(consolePlayer, "x5_menu");
    }
    else
    {
      // The global multiplier is used for all enemy types.
      mTypeMultipliers = fillTypeMultipliersWithGlobal(mEnemyTypes);
    }
  }

  override void interfaceProcess(ConsoleEvent event)
  {
    if (event.name != "x5_menu") return;

    Menu.setMenu("x5_TypeMultipliers");
    x5_TypeMultipliersMenu(Menu.getCurrentMenu()).setUp(self, mEnemyTypes);
  }

  override void worldTick()
  {
    // wait for type multipliers.
    if (mTypeMultipliers == NULL) return;

    if (level.mapTime > TIME_TO_RANDOMIZE)
    {
      multiply();
      mTypeMultipliers = NULL;
    }
  }

  override void networkProcess(ConsoleEvent event)
  {
    if (event.name.left(3) != "x5_") return;

    mTypeMultipliers = Dictionary.fromString(event.name.mid(3));
  }

  override void worldThingSpawned(WorldEvent event)
  {
    let thing = event.thing;

    // Otherwise, if two enemies share the same space,
    // their missiles will collide immediately.
    if (thing != NULL && thing.bMissile && x5_multiplier > 100)
      thing.bMThruSpecies = true;
  }

  private static void collectSpawnPoints(out Array<x5_SpawnPoint> result)
  {
    Actor anActor;
    for (let i = ThinkerIterator.create("Actor"); anActor = Actor(i.next());)
    {
      let replaceeType = Actor.getReplacee(anActor.getClassName());

      if (!isCloneable(getDefaultByType(replaceeType))) continue;

      let spawnPoint          = new ("x5_SpawnPoint");
      spawnPoint.position     = anActor.pos;
      spawnPoint.height       = anActor.height;
      spawnPoint.radius       = anActor.radius;
      spawnPoint.replaceeType = replaceeType;
      spawnPoint.original     = anActor;
      result.push(spawnPoint);
    }
  }

  private static Dictionary collectEnemyTypes(Array<x5_SpawnPoint> spawnPoints)
  {
    let result = Dictionary.create();
    foreach (spawnPoint : spawnPoints)
    {
      result.insert(spawnPoint.replaceeType.getClassName(), "100");
    }
    return result;
  }

  private static Dictionary fillTypeMultipliersWithGlobal(Dictionary enemyTypes)
  {
    let result              = Dictionary.create();
    let formattedMultiplier = string.format("%d", x5_multiplier);
    for (let i = DictionaryIterator.create(enemyTypes); i.next();)
      result.insert(i.key(), formattedMultiplier);

    return result;
  }

  private Dictionary mEnemyTypes;
  private Dictionary mTypeMultipliers;
  private Array<x5_SpawnPoint> mSpawnPoints;

  private void multiply()
  {
    for (let i = DictionaryIterator.create(mTypeMultipliers); i.next();)
    {
      int multiplier = i.value().toInt();
      if (multiplier == 100) continue;

      Array<Actor> enemiesByType;
      collectSpawnedEnemiesByType(i.key(), enemiesByType);
      multiplyEnemies(enemiesByType, multiplier);
    }
  }

  private void collectSpawnedEnemiesByType(class<Actor> type,
                                           out Array<Actor> enemiesByType)
  {
    foreach (spawnPoint : mSpawnPoints)
    {
      if (spawnPoint.replaceeType != type) continue;

      // If the actor is still present, great!
      // Otherwise, assume the spawned actor isn't far away.
      if (spawnPoint.original != NULL) { enemiesByType.push(spawnPoint.original); }
      else
      {
        let pos    = spawnPoint.position;
        let height = spawnPoint.height;
        let radius = spawnPoint.radius;
        let i      = BlockThingsIterator.createFromPos(pos.x, pos.y, pos.z, height,
                                                       radius, false);

        if (i.next()) enemiesByType.push(i.thing);
      }
    }
  }

  private static void multiplyEnemies(Array<Actor> enemies, int multiplier)
  {
    if (multiplier == 100) return;

    console.printf("multiply time: %d, multiplier: %d", level.time, multiplier);

    int integerMultiplier = multiplier / 100;
    int copiesNumber      = integerMultiplier - 1;
    foreach (enemy : enemies)
    {
      if (multiplier == 0)
      {
        let killer =
            x5_Killer(Actor.spawn("x5_Killer", x5_Killer.makePosition(enemy)));
        killer.init(enemy);
      }
      else
      {
        for (int c = 0; c < copiesNumber; ++c)
          clone(enemy);
      }
    }

    if (multiplier % 100 == 0) return;

    shuffle(enemies);

    double fractionMultiplier = (multiplier % 100) * 0.01;
    uint enemiesNumber        = enemies.size();
    uint stp                  = uint(round(enemiesNumber * fractionMultiplier));

    if (integerMultiplier >= 1) // add
    {
      for (uint i = 0; i < stp; ++i)
        clone(enemies[i]);
    }
    else // decimate
    {
      for (uint i = stp; i < enemiesNumber; ++i)
      {
        let killer =
            x5_Killer(Actor.spawn("x5_Killer", x5_Killer.makePosition(enemies[i])));
        killer.init(enemies[i]);
      }
    }
  }

  private static void clone(Actor original)
  {
    original.bThruSpecies = true;

    let spawned          = Actor.spawn(original.getClassName(), original.pos);
    spawned.bAmbush      = original.bAmbush;
    // TODO: disable through species when an enemy can move without it?
    spawned.bThruSpecies = true;

    // copied from randomspawner.zs
    spawned.spawnAngle = original.spawnAngle;
    spawned.angle      = original.angle;
    spawned.pitch      = original.pitch;
    spawned.roll       = original.roll;
    spawned.spawnPoint = original.spawnPoint;
    spawned.special    = original.special;
    spawned.args[0]    = original.args[0];
    spawned.args[1]    = original.args[1];
    spawned.args[2]    = original.args[2];
    spawned.args[3]    = original.args[3];
    spawned.args[4]    = original.args[4];
    spawned.special1   = original.special1;
    spawned.special2   = original.special2;
    // MTF_SECRET needs special treatment to avoid incrementing the secret
    // counter twice. It had already been processed for the spawner itself.
    spawned.spawnFlags = original.spawnFlags & ~MTF_SECRET;
    spawned.handleSpawnFlags();

    spawned.spawnFlags   = original.spawnFlags;
    // "Transfer" count secret flag to spawned actor
    spawned.bCountSecret = original.spawnFlags & MTF_SECRET;
    spawned.changeTid(original.tid);
    spawned.vel    = original.vel;
    // For things such as DamageMaster/DamageChildren, transfer mastery.
    spawned.master = original.master;
    spawned.target = original.target;
    spawned.tracer = original.tracer;
    spawned.copyFriendliness(original, false);
  }

  private static bool isCloneable(readonly<Actor> anActor)
  {
    return anActor.bIsMonster && !anActor.bFriendly && anActor.bCountKill;
  }

  private static void shuffle(out Array<Actor> actors)
  {
    // Fisher-Yates shuffle.
    uint numberOfActors = actors.size();
    for (uint i = numberOfActors - 1; i >= 1; --i)
    {
      int j = random[x105](0, i);

      let temp  = actors[i];
      actors[i] = actors[j];
      actors[j] = temp;
    }
  }

  // There are mods that have randomization that takes a few tics.
  const TIME_TO_RANDOMIZE = 4;
} // class x5_EventHandler
#+end_src

#+begin_src c :tangle ../build/10.5x/zscript/x5_EventHandler.zs
class x5_SpawnPoint
{
  vector3 position;
  double height;
  double radius;
  class<Actor> replaceeType;
  Actor original;
}
#+end_src

* ~x5_Killer~
This class kills an enemy when the enemy becomes active. Such an enemy is marked with a floating icon. Whether an enemy killed by ~x5_Killer~ can be resurrected is controlled by ~x5_raise_divided~ [[~cvarinfo~][Cvar]].

#+begin_src c :tangle ../build/10.5x/zscript/x5_Killer.zs
class x5_Killer : Actor
{
  Default
  {
    Height 30;
    FloatBobStrength 0.2;
    RenderStyle 'translucent'; // Change this to 'none' to hide killer marks.
    Alpha 0.1;

    +NoBlockmap;
    +NoGravity;
    +DontSplash;
    +NotOnAutomap;
    +FloatBob;
    +Bright;
  }

  States
  {
  Spawn:
    m8rd A - 1;
    Stop;
  }

  override void tick()
  {
    Super.tick();

    if (mWatched == NULL)
    {
      destroy();
      return;
    }

    setOrigin(makePosition(mWatched), true);

    if (mWatched.health > 0 && mWatched.target == NULL) return;

    mWatched.a_Die();
    mWatched.bCorpse = x5_raise_divided;
    destroy();
  }

  void init(Actor watched) { mWatched = watched; }

  static vector3 makePosition(Actor watched)
  {
    return watched.pos + (0, 0, watched.height * 1.5);
  }

  private Actor mWatched;
} // class x5_Killer
#+end_src

* ~cvarinfo~
#+begin_src c :tangle ../build/10.5x/cvarinfo.txt
server int  x5_multiplier    = 100;
server bool x5_raise_divided = false;

nosave string x5_type_multipliers = "";
#+end_src

* ~language~
#+begin_src ini :tangle ../build/10.5x/language.txt
// SPDX-FileCopyrightText: 2020 Blueberryy

[enu default]
X_TYPE_MENU_TITLE = "10.5x Enemy Multipliers";
X_EXIT  = "Exit this menu to start the level.";
X_000   = "Per enemy type (on level start)";

[ru]
X_TYPE_MENU_TITLE = "10.5x Коэффициенты врагов";
X_EXIT  = "Выйдите из этого меню, чтобы начать уровень.";
X_000   = "По типу врагов (при старте уровня)";
#+end_src

* Global multiplier
** ~OptionMenuItemX5Slider~
#+begin_src txt :tangle ../build/10.5x/menudef.txt
AddOptionMenu OptionsMenu
{
  X5Slider "", x5_multiplier, 0, 10.5, 0.05, 2
}
#+end_src

#+begin_src c :tangle ../build/10.5x/zscript/OptionMenuItemX5Slider.zs
class OptionMenuItemX5Slider : OptionMenuItemSlider
{
  OptionMenuItemX5Slider init(string label,
                              name command,
                              double min,
                              double max,
                              double step,
                              int showval = 1)
  {
    Super.init(label, command, min, max, step, showval);
    setLabel(mCvar.getInt());
    return self;
  }

  override double getSliderValue() { return (mCvar.getInt() / 100.0); }

  override void setSliderValue(double val)
  {
    int v = int(round(val * 100));
    mCvar.setInt(v);
    setLabel(v);
  }

  private void setLabel(int val)
  {
    mLabel = (val == 0) ? StringTable.localize("$X_000").." 10.5x:" : "10.5x:";
  }
} // class OptionMenuItemX5Slider
#+end_src

* Type multipliers
** ~x5_TypeMultipliersMenu~
#+begin_src txt :tangle ../build/10.5x/menudef.txt
OptionMenu "x5_TypeMultipliers"
{
  Class "x5_TypeMultipliersMenu"
  Title "$X_TYPE_MENU_TITLE"
}
#+end_src

#+begin_src c :tangle ../build/10.5x/zscript/x5_TypeMultipliersMenu.zs
class x5_TypeMultipliersMenu : OptionMenu
{
  override bool menuEvent(int mKey, bool fromController)
  {
    if (mKey == MKey_Back) report();

    return Super.menuEvent(mKey, fromController);
  }

  void setUp(EventHandler anEventHandler, Dictionary enemyTypes)
  {
    mEventHandler = anEventHandler;

    mDesc.mItems.clear();
    mDesc.mSelectedItem = 2;

    string description = StringTable.localize("$X_EXIT");
    mDesc.mItems.push(
        new ("OptionMenuItemStaticText").initDirect(description, Font.CR_Black));
    mDesc.mItems.push(new ("OptionMenuItemStaticText").init(""));

    let savedMultipliers = Dictionary.fromString(x5_type_multipliers);
    for (let i = DictionaryIterator.create(savedMultipliers); i.next();)
    {
      string type = i.key();

      if (enemyTypes.at(type).length() != 0)
      {
        int multiplier = i.value().toInt();
        enemyTypes.insert(type, string.format("%d", multiplier));
      }
    }

    Array<x5_TypeSortElement> types;

    for (let i = DictionaryIterator.create(enemyTypes); i.next();)
    {
      class<Actor> enemyClass = i.key();
      int multiplier          = i.value().toInt();
      let defaultEnemy        = getDefaultByType(enemyClass);

      let element         = new ("x5_TypeSortElement");
      element.mName       = defaultEnemy.getTag();
      element.mHealth     = defaultEnemy.health;
      element.mClass      = enemyClass;
      element.mMultiplier = multiplier;
      types.push(element);
    }

    sortTypes(types);

    foreach (element : types)
    {
      let slider = new ("OptionMenuItemX5TypeSlider");
      slider.init(element.mClass, element.mMultiplier);

      mDesc.mItems.push(slider);
    }
  }

  private void report()
  {
    let savedMultipliers    = Dictionary.fromString(x5_type_multipliers);
    let multipliersToReport = Dictionary.create();

    foreach (menuItem : mDesc.mItems)
    {
      let slider = OptionMenuItemX5TypeSlider(menuItem);
      if (slider == NULL) continue;

      string className  = slider.getEnemyClassName();
      string multiplier = string.format("%d", slider.getValue());

      multipliersToReport.insert(className, multiplier);
      savedMultipliers.insert(className, multiplier);
    }

    Cvar.findCvar("x5_type_multipliers").setString(savedMultipliers.toString());

    string event = string.format("x5_%s", multipliersToReport.toString());
    mEventHandler.sendNetworkEvent(event);
  }

  private void sortTypes(out Array<x5_TypeSortElement> types)
  {
    // Gnome sort (stupid sort): https://en.wikipedia.org/wiki/Gnome_sort

    let pos    = 0;
    let length = types.size();

    while (pos < length)
    {
      if (pos == 0 || isGreaterOrEqual(types[pos], types[pos - 1])) { ++pos; }
      else
      {
        // swap
        let tmp        = types[pos];
        types[pos]     = types[pos - 1];
        types[pos - 1] = tmp;

        --pos;
      }
    }
  }

  private bool isGreaterOrEqual(x5_TypeSortElement lhs, x5_TypeSortElement rhs)
  {
    if (lhs.mHealth > rhs.mHealth) return true;
    if (lhs.mHealth == rhs.mHealth && lhs.mName >= rhs.mName) return true;

    return false;
  }

  private EventHandler mEventHandler;
} // class x5_TypeMultipliersMenu
#+end_src

#+begin_src c :tangle ../build/10.5x/zscript/x5_TypeMultipliersMenu.zs
class x5_TypeSortElement
{
  string mName;
  int mHealth;
  class<Actor> mClass;
  int mMultiplier;
}
#+end_src

** ~OptionMenuItemX5TypeSlider~
#+begin_src c :tangle ../build/10.5x/zscript/OptionMenuItemX5TypeSlider.zs
class OptionMenuItemX5TypeSlider : OptionMenuItemSlider
{
  void init(class<Actor> enemyClass, int value)
  {
    Super.init(getDefaultByType(enemyClass).getTag(), "", 0, 10.5, 0.05, 2);

    mValue          = value;
    mEnemyClassName = enemyClass.getClassName();
  }

  override double getSliderValue() { return (mValue / 100.0); }

  override void setSliderValue(double value) { mValue = int(round(value * 100)); }

  string getEnemyClassName() { return mEnemyClassName; }

  int getValue() { return mValue; }

  private int mValue;
  private string mEnemyClassName;
}
#+end_src

* ~Zscript~
#+begin_src c :tangle ../build/10.5x/zscript.zs
version 4.14

#include "zscript/OptionMenuItemX5Slider.zs"
#include "zscript/OptionMenuItemX5TypeSlider.zs"

#include "zscript/x5_EventHandler.zs"
#include "zscript/x5_Killer.zs"
#include "zscript/x5_TypeMultipliersMenu.zs"
#+end_src

* Sprites
[[../media/10.5x/sprites/m8rda0.png]]

#+name: copy-media
#+begin_src elisp :exports none
(copy-directory "../media/10.5x" "../../build/10.5x" nil t t)
""
#+end_src
This script has to be parked somewhere.
#+begin_src c :tangle ../build/10.5x/zscript.zs
<<copy-media()>>
#+end_src

* Tests
#+begin_src c :tangle ../build/10.5xTest/mapinfo.txt
GameInfo { EventHandlers = "x5t_Test", "x5t_Quoter" }
#+end_src

#+begin_src c :tangle ../build/10.5xTest/cvarinfo.txt
server string x5t_name  = "";
server string x5t_spawn = "";
#+end_src

#+begin_src c :tangle ../build/10.5xTest/zscript.zs
version 4.14
#+end_src

#+begin_src c :tangle ../build/10.5xTest/zscript.zs
class x5t_Clematis : Clematis
{
}
#+end_src

#+begin_src c :tangle ../build/10.5xTest/zscript.zs
class x5t_Test : StaticEventHandler
{
  override void onRegister() { setOrder(-1); }

  override void networkProcess(ConsoleEvent event)
  {
    if (event.name == "x5t_begin")
    {
      mTest = new ("x5t_Clematis");
      mTest.describe("10.5x test");
    }
    else if (event.name.left(10) == "x5t_expect")
    {
      let expected = Dictionary.fromString(x5t_Quoter.quote(event.name.mid(10)));
      for (let i = DictionaryIterator.create(expected); i.next();)
        testActorClass(x5t_name, i.value().toInt(), i.key());
    }
    else if (event.name == "x5t_end") { mTest.endDescribe(); }
  }

  override void worldLoaded(WorldEvent event)
  {
    int width  = getDefaultByType('DoomImp').radius * 2;
    int yBegin = -2 * width;
    int yEnd   = 2 * width;
    int x      = 100;
    int y      = yBegin;

    console.printf("spawn time: %d", level.time);
    let spawn = Dictionary.fromString(x5t_Quoter.quote(x5t_spawn));
    for (let i = DictionaryIterator.create(spawn); i.next();)
    {
      int count = i.value().toInt();
      for (int c = 0; c < count; ++c)
      {
        Actor.spawn(i.key(), players[consolePlayer].mo.pos + (x, y, 0),
                    ALLOW_REPLACE);

        y += width;
        if (y > yEnd)
        {
          y = yBegin;
          x += width;
        }
      }
    }
  }

  private void
  testActorClass(string testName, int expectedCount, string actorClassName)
  {
    int aliveCount   = 0;
    int canMoveCount = 0;

    let i = ThinkerIterator.create(actorClassName);
    for (Actor anActor = Actor(i.next()); anActor != NULL; anActor = Actor(i.next()))
    {
      aliveCount += (anActor.health > 0);
      canMoveCount += (anActor.health > 0) && anActor.checkMove(anActor.pos.xy);
    }

    string description = testName..": "..actorClassName;
    mTest.it(description..": alive",
             mTest.assertEval(aliveCount, "==", expectedCount));
    mTest.it(description..": can move",
             mTest.assertEval(canMoveCount, "==", expectedCount));
  }

  private Clematis mTest;

} // class x5t_Test
#+end_src

#+begin_src c :tangle ../build/10.5xTest/zscript.zs
class x5t_Quoter : EventHandler
{
  static string quote(string input)
  {
    input.replace("'", "\"");
    return input;
  }

  override void NetworkProcess(ConsoleEvent event)
  {
    if (event.name.left(3) == "x5r")
      sendNetworkEvent("x5_"..quote(event.name.mid(3)));
  }
}
#+end_src

Doom monsters with radius 20:
| Monster         | In tests | Replacement                        |
|-----------------+----------+------------------------------------|
| ~Archvile~      | Yes      | ~x5t_Archvile~ via ~RandomSpawner~ |
| ~DoomImp~       | Yes      | No                                 |
| ~Revenant~      | Yes      | ~x5t_Revenant~ via ~A_SpawnItemEx~ |
| ~ZombieMan~     | Yes      | No                                 |
| ~ShotgunGuy~    |          |                                    |
| ~ChaingunGuy~   |          |                                    |
| ~WolfensteinSS~ |          |                                    |

#+begin_src c :tangle ../build/10.5xTest/zscript.zs
// clang-format off
class x5t_Archvile : Archvile {}
class x5t_Revenant : Revenant {}
// clang-format on

class x5t_ArchvileReplacer : RandomSpawner replaces Archvile
{
  Default { DropItem "x5t_Archvile"; }
}

/// Based on switch-based replacements from Brutal Doom v21.
class x5t_RevenantReplacer : Actor replaces Revenant
{
  States
  {
  Spawn:
    TNT1 A 0
    {
      bThruActors = 1;
      bCountKill  = 0;
    }
    TNT1 A 0 a_SpawnItemEx("x5t_Revenant", 0, 0, 0, 0, 0, 0, 0,
                           SXF_NoCheckPosition | SXF_TransferAmbushFlag, 0);
    Stop;
  }
}
#+end_src

TODO: make multiplayer tests, maybe?

#+begin_src elisp
(load-file "../build/TestRunner/dt-scripts.el")

(dt-run-tests
 "../build/10.5x ../build/10.5xTest"

 "x5_multiplier 100; wait 2; map map01; wait 2; netevent x5t_begin; wait 2;

  x5t_name IntegerMultiplier;
  x5_multiplier 300; wait 2;
  x5t_spawn {'DoomImp':'1','ZombieMan':'1'}; wait 2; map map01; wait 10;
  netevent x5t_expect{'DoomImp':'3','ZombieMan':'3'}; wait 10;

  x5t_name FractionalMultiplier;
  x5_multiplier 270; wait 2;
  x5t_spawn {'DoomImp':'10'}; wait 2; map map01; wait 10;
  netevent x5t_expect{'DoomImp':'27'}; wait 10;

  x5t_name Divider;
  x5_multiplier 70; wait 2;
  x5t_spawn {'DoomImp':'10'}; wait 2; map map01; wait 10;
  turn180; wait 10; +attack; wait 10; -attack; wait 10;
  netevent x5t_expect{'DoomImp':'7'}; wait 10;

  x5t_name PerClass;
  x5_multiplier 0; wait 2;
  x5t_spawn {'DoomImp':'1','ZombieMan':'1'}; wait 2; map map01; wait 10;
  netevent x5r{'DoomImp':'300','ZombieMan':'500'}; closemenu; wait 10;
  netevent x5t_expect{'DoomImp':'3','ZombieMan':'5'}; wait 10;

  x5t_name RandomSpawner;
  x5_multiplier 200; wait 2;
  x5t_spawn {'Archvile':'1'}; wait 2; map map01; wait 10;
  netevent x5t_expect{'x5t_Archvile':'2'}; wait 10;

  x5t_name A_SpawnItemEx;
  x5_multiplier 200; wait 2;
  x5t_spawn {'Revenant':'1'}; wait 2; map map01; wait 10;
  netevent x5t_expect{'x5t_Revenant':'2'}; wait 10;

  netevent x5t_end; wait 2; quit")
#+end_src
