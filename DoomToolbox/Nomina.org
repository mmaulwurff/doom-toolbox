# SPDX-FileCopyrightText: © 2025 Alexander Kromm <mmaulwurff@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only
:properties:
:header-args: :comments no :mkdirp yes :noweb yes :results none
:end:
#+title: Nomina

* [[file:../docs/WhereAreTheProjectFiles.org][Where are the project files?]]

* License :noexport:
[[file:../LICENSES/GPL-3.0-only.txt][GPL-3.0-only]]
#+name: GPL
#+begin_src txt :exports none
SPDX-FileCopyrightText: © 2025 Alexander Kromm <mmaulwurff@gmail.com>
SPDX-License-Identifier: GPL-3.0-only
#+end_src

* Cvarinfo - console variable (Cvar) definitions
#+begin_src txt :tangle ../build/Nomina/cvarinfo.txt
// <<GPL>>

server nosave string na_config = "";
#+end_src

* Keyconf - key and command definitions
#+begin_src txt :tangle ../build/Nomina/keyconf.txt
// <<GPL>>

Alias na_rename "netevent na_rename:%1:%2"
#+end_src

* Language - user-visible strings
#+begin_src ini :tangle ../build/Nomina/language.txt
// <<GPL>>

[enu default]
//MT_TITLE = "Nomina";
//MT_GREET = "Greet";
//MT_HELLO = "Hello, world!";
//MT_VALUE = "Cvar value";
#+end_src

* Tests begin
#+begin_src c :tangle ../build/NominaTest/zscript.zs
// <<GPL>>

version 4.14

#include "zscript/nat_Actors.zs"
#+end_src

#+begin_src c :tangle ../build/NominaTest/zscript.zs
class nat_Test : Clematis
{
}

class nat_EventHandler : StaticEventHandler
{
  override void worldLoaded(WorldEvent event)
  {
    mTest = new ("nat_Test");
    mTest.Describe("Nomina tests");

    mExpectedNames = Dictionary.create();
    // continued elsewhere.
#+end_src

* ZScript - source code
#+begin_src c :tangle ../build/Nomina/zscript.zs
// <<GPL>>

version 4.14
#+end_src

#+begin_src txt :tangle ../build/Nomina/mapinfo.txt
// <<GPL>>

GameInfo { EventHandlers = "na_EventHandler" }
#+end_src

#+begin_src c :tangle ../build/Nomina/zscript.zs
class na_EventHandler : StaticEventHandler
{
  override void worldThingSpawned(WorldEvent event)
  {
    Actor thing = event.thing;

    if (thing == NULL || !(thing.bIsMonster || thing is "Weapon")) return;

    {
      let[found, name] = findNameInConfig(thing.getClassName());
      if (found)
      {
        thing.setTag(name);
        return;
      }
    }

    // TODO: search names in loadable data files.

    bool hasTag = thing.getTag(".") != ".";
    if (hasTag) return;
#+end_src
#+begin_src c :tangle ../build/NominaTest/zscript/nat_Actors.zs
class nat_Imp : DoomImp {}
#+end_src
#+begin_src c :tangle ../build/NominaTest/zscript.zs
    mExpectedNames.insert("DoomImp", "Imp");
    mExpectedNames.insert("nat_Imp", "Imp");
#+end_src
#+begin_src c :tangle ../build/Nomina/zscript.zs

    string name = makeAutoName(thing.getClassName());
    thing.setTag(name);
  }

  override void networkProcess(ConsoleEvent event)
  {
    Array<string> parts;
    event.name.split(parts, ":");

    if (parts.size() == 0 || parts[0] != "na_rename") return;

    string className = parts[1];
    string newTag    = parts[2];

    if (parts.size() != 3 || className.length() == 0 || newTag.length() == 0)
    {
      // TODO: Translate this?
      Console.printf("Usage:\nna_rename ClassName NewTag");
      return;
    }

    let config = Dictionary.fromString(na_config);
    config.insert(className, newTag);
    CVar.getCvar("na_config").setString(config.toString());

    let i = ThinkerIterator.create(className);
    for (Actor anActor = Actor(i.next()); anActor != NULL; anActor = Actor(i.next()))
      anActor.setTag(newTag);
  }

  /// Turns '_' to spaces, capitalizes words, trims and removes duplicate spaces,
  /// splits camelCase.
  private static string makeAutoName(string className)
  {
    className.replace("_", " ");

    Array<string> words;
    className.split(words, " ", TOK_SkipEmpty);

    string result;

    foreach (word : words)
    {
      // It seems that non-latin characters are not allowed in class names. Overkill?
      let[firstChar, firstLength] = word.getNextCodepoint(0);

      string split = string.format("%c", string.charUpper(firstChar));
      for (uint i = firstLength; i < word.length();)
      {
        let[letter, next] = word.getNextCodepoint(i);

        if (string.charLower(letter) != letter) split.appendFormat(" %c", letter);
        else split.appendFormat("%c", letter);

        i = next;
      }

      if (result.length() != 0) result.appendFormat(" %s", split);
      else result.appendFormat("%s", split);
    }

    return result;
  }
#+end_src
#+begin_src c :tangle ../build/NominaTest/zscript/nat_Actors.zs
class _nat__nameless1_   : nat_Monster {}
class nat_CamelCaseEnemy : nat_Monster {}
#+end_src
#+begin_src c :tangle ../build/NominaTest/zscript.zs
    mExpectedNames.insert("_nat__nameless1_", "Nat Nameless1");
    mExpectedNames.insert("nat_CamelCaseEnemy", "Nat Camel Case Enemy");
#+end_src
#+begin_src c :tangle ../build/Nomina/zscript.zs

  private static bool, string findNameInConfig(string className)
  {
    let config    = Dictionary.fromString(na_config);
    string newTag = config.at(className);

    return newTag.length() != 0, newTag;
  }
}
#+end_src
#+begin_src c :tangle ../build/NominaTest/zscript/nat_Actors.zs
class nat_NamelessByConfig : nat_Monster {}
#+end_src
#+begin_src c :tangle ../build/NominaTest/zscript.zs
    // Cannot set a string value with " in the console, have to do it programmatically.
    CVar.getCvar("na_config").setString(
      "{\"nat_NamelessByConfig\":\"TestName\", \"Zombieman\":\"TestZombie\"}");
    mExpectedNames.insert("nat_NamelessByConfig", "TestName");
    mExpectedNames.insert("Zombieman", "TestZombie");
#+end_src

* Tests end
#+begin_src txt :tangle ../build/NominaTest/mapinfo.txt
// <<GPL>>

GameInfo { EventHandlers = "nat_EventHandler" }
#+end_src

#+begin_src c :tangle ../build/NominaTest/zscript/nat_Actors.zs
class nat_Monster : Actor { Default { Monster; } }
#+end_src

#+begin_src c :tangle ../build/NominaTest/zscript.zs
    // started elsewhere.
    vector3 spawnPoint = players[consolePlayer].mo.pos + (100, 0, 0);

    for (let i = DictionaryIterator.create(mExpectedNames); i.next();)
      Actor.Spawn(i.key(), spawnPoint);
  }

  override void worldThingSpawned(WorldEvent event)
  {
    Actor thing = event.thing;

    if (thing == NULL || !(thing.bIsMonster || thing is "Weapon")) return;

    string className = thing.getClassName();
    if (mExpectedNames.at(className).length() == 0) return;

    bool isExpected = thing.getTag() == mExpectedNames.at(className);
    mTest.it(className, mTest.assert(isExpected));
    if (!isExpected)
      Console.printf("%s", thing.getTag());
  }

  override void OnUnregister() { mTest.EndDescribe(); }

  private Clematis mTest;
  private Dictionary mExpectedNames;
}
#+end_src

* Run tests
#+begin_src elisp
(load-file "../build/TestRunner/dt-scripts.el")
(dt-run-tests "../build/Nomina ../build/NominaTest" "wait 2; map map01; wait 9; quit")
#+end_src
