# SPDX-FileCopyrightText: © 2024 Alexander Kromm <mmaulwurff@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only
#+property: header-args :comments no :mkdirp yes :noweb yes :results none
#+startup: content

#+title: Mod Template

* [[file:../documentation/WhereAreTheProjectFiles.org][Where are the project files?]]

* Mod Template

This is the template for add-ons (mods) for GZDoom family game engines.

* Cvarinfo - console variable (Cvar) definitions

~<scope> [features] <type> <name> [= defaultvalue];~
- features: ~noarchive~, ~cheat~, ~latch~, ~handlerclass("<classname>")~
- scope: ~server~, ~user~, ~nosave~

#+begin_src txt :tangle ../build/ModTemplate/cvarinfo.txt
// <<CC>>

server int mt_value = 2;
#+end_src

* Keyconf - key and command definitions

#+begin_src txt :tangle ../build/ModTemplate/keyconf.txt
// <<CC>>

Alias +hello "netevent mt_print_hello"
Alias -hello "netevent mt_print_value"

AddKeySection "$MT_TITLE" ModTemplate
AddMenuKey "$MT_GREET" +hello
DefaultBind g +hello
#+end_src

* Language - user-visible strings

#+begin_src ini :tangle ../build/ModTemplate/language.txt
// <<CC>>

[enu default]
MT_TITLE = "ModTemplate";
MT_GREET = "Greet";
MT_HELLO = "Hello, world!";
MT_VALUE = "Cvar value";
#+end_src

* Mapinfo - map and event handler definitions

#+begin_src txt :tangle ../build/ModTemplate/mapinfo.txt
// <<CC>>

GameInfo { AddEventHandlers = "ModTemplateEventHandler" }
#+end_src

* Menudef - menu definitions

#+begin_src txt :tangle ../build/ModTemplate/menudef.txt
// <<CC>>

AddOptionMenu OptionsMenu       { SubMenu "$MT_TITLE", mt_Options }
AddOptionMenu OptionsMenuSimple { SubMenu "$MT_TITLE", mt_Options }

OptionMenu mt_Options
{
  Title      "$MT_TITLE"
  StaticText "$MT_HELLO", 1
  Control    "$MT_GREET", "+hello"
  Slider     "$MT_VALUE", mt_value, 0, 9, 1, 0
}
#+end_src

* ZScript - source code

#+begin_src c :tangle ../build/ModTemplate/zscript.txt
// <<GPL>>

version 4.12.2

class ModTemplateEventHandler : StaticEventHandler
{
  // Only for StaticEventHandler
  override void OnEngineInitialize() {}
  override void OnRegister() {}
  override void OnUnregister() {}

  override void WorldLoaded(WorldEvent event) {}
  override void WorldUnloaded(WorldEvent event) {}
  override void WorldTick() {}
  override void WorldLightning(WorldEvent event) {}

  override void WorldThingSpawned(WorldEvent event) {}
  override void WorldThingDied(WorldEvent event) {}
  override void WorldThingRevived(WorldEvent event) {}
  override void WorldThingDestroyed(WorldEvent event) {}
  override void WorldThingDamaged(WorldEvent event) {}
  override void WorldThingGround(WorldEvent event) {}
  
  override void WorldLineDamaged(WorldEvent event) {}
  override void WorldSectorDamaged(WorldEvent event) {}
  override void WorldLinePreActivated(WorldEvent event) {}
  override void WorldLineActivated(WorldEvent event) {}

  override void PlayerEntered(PlayerEvent event) {}
  override void PlayerSpawned(PlayerEvent event) {}
  override void PlayerRespawned(PlayerEvent event) {}
  override void PlayerDied(PlayerEvent event) {}
  override void PlayerDisconnected(PlayerEvent event) {}
  override void NewGame() {}

  override void RenderOverlay(RenderEvent event) {}
  override void RenderUnderlay(RenderEvent event) {}

  override bool UiProcess(UiEvent event) { return true; }
  override bool InputProcess(InputEvent event) { return true; }

  override void UiTick() {}
  override void PostUiTick() {}

  override void ConsoleProcess(ConsoleEvent event) {}
  override void InterfaceProcess(ConsoleEvent event) {}

  override void NetworkProcess(ConsoleEvent event)
  {
    if (event.name == "mt_print_hello")
      Console.Printf(StringTable.Localize("$MT_HELLO"));

    else if (event.name == "mt_print_value")
      Console.Printf("Server value is %d", mt_value);
  }

  override void CheckReplacement(ReplaceEvent event) {}
  override void CheckReplacee(ReplacedEvent event) {}
}
#+end_src

* (Org) Licenses - snippets to include to files :noexport:

[[file:../LICENSES/CC0-1.0.txt][CC0-1.0]]
#+name: CC
#+begin_src txt :exports none
SPDX-FileCopyrightText: © 2024 Alexander Kromm <mmaulwurff@gmail.com>
SPDX-License-Identifier: CC0-1.0
#+end_src

[[file:../LICENSES/GPL-3.0-only.txt][GPL-3.0-only]]
#+name: GPL
#+begin_src txt :exports none
SPDX-FileCopyrightText: © 2024 Alexander Kromm <mmaulwurff@gmail.com>
SPDX-License-Identifier: GPL-3.0-only
#+end_src
