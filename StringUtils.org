# SPDX-FileCopyrightText: © 2024 Alexander Kromm <mmaulwurff@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only
:properties:
:header-args: :comments no :mkdirp yes :noweb yes :results none
:end:
#+title: String Utils

* Classes
#+begin_src c :tangle build/StringUtils/StringUtils.txt
// <<GPL>>

class NAMESPACE_su : NAMESPACE_StringUtils {}
class NAMESPACE_StringUtils {
#+end_src

* Tests
#+begin_src c :tangle build/StringUtils/zscript.txt
// <<GPL>>

version 4.12.2
#include "StringUtils.txt"

class su : NAMESPACE_StringUtils {}
class su_Test : Clematis { override void TestSuites() {
#+end_src

* Functions
** Join
Joins strings to a single string separated by delimiter.

#+begin_src c :tangle build/StringUtils/StringUtils.txt
static clearscope string join(Array<string> strings, string delimiter)
{
  uint nStrings = strings.size();
  if (nStrings == 0) return "";

  string result = strings[0];

  for (uint i = 1; i < nStrings; ++i)
    result.appendFormat("%s%s", delimiter, strings[i]);

  return result;
}
#+end_src
#+begin_src c :tangle build/StringUtils/zscript.txt
Describe("join test");
Array<string> strings;
It("empty", Assert(su.join(strings, ".") == ""));

strings.push("hello");
strings.push("world");
It("join with delimiter",    Assert(su.join(strings, ", ") == "hello, world"));
It("join without delimiter", Assert(su.join(strings, "")   == "helloworld"));
EndDescribe();
#+end_src

** Repeat
Repeats the specified string the specified number of times.

#+begin_src c :tangle build/StringUtils/StringUtils.txt
static clearscope string repeat(string aString, int times)
{
  // Make the specified number of spaces using padding format.
  string result = string.format("%*d", times + 1, 0);
  result.deleteLastCharacter();
  result.replace(" ", aString);
  return result;
}
#+end_src
#+begin_src c :tangle build/StringUtils/zscript.txt
Describe("repeat test");
It("zero",  Assert(su.repeat("a",     0) == ""));
It("one",   Assert(su.repeat("hello", 1) == "hello"));
It("3",     Assert(su.repeat("!?",    3) == "!?!?!?"));
It("empty", Assert(su.repeat("",      7) == ""));
EndDescribe();
#+end_src

* Launch :noexport:
src_elisp{(load-file "build/TestRunner/dt-scripts.el")}
src_elisp{(run-tests "wait 1; quit")}

* Class ends
#+begin_src c :tangle build/StringUtils/StringUtils.txt
}
#+end_src
#+begin_src c :tangle build/StringUtils/zscript.txt
}}
#+end_src

* Licenses :noexport:
#+name: GPL
#+begin_src :exports none
SPDX-FileTextCopyright: © 2024 Alexander Kromm <mmaulwurff@gmail.com>
SPDX-License-Identifier: GPL-3.0-only
#+end_src
